// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for BuildOperations.
    /// </summary>
    public static partial class BuildOperationsExtensions
    {
            /// <summary>
            /// Gets the Xcode versions available to this app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAppsByOwnerNameByAppNameXcodeVersions(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppsByOwnerNameByAppNameXcodeVersionsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Xcode versions available to this app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameXcodeVersionsAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameXcodeVersionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the repositories available from the source code host
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAppsByOwnerNameByAppNameSourceHostsBySourceHostRepositories(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppsByOwnerNameByAppNameSourceHostsBySourceHostRepositoriesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the repositories available from the source code host
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameSourceHostsBySourceHostRepositoriesAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameSourceHostsBySourceHostRepositoriesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the repository build configuration status of the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAppsByOwnerNameByAppNameRepoConfig(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppsByOwnerNameByAppNameRepoConfigAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the repository build configuration status of the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameRepoConfigAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameRepoConfigWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Configures the repository for build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repo'>
            /// The repository information
            /// </param>
            public static object PostAppsByOwnerNameByAppNameRepoConfig(this IBuildOperations operations, RepoInfo repo)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).PostAppsByOwnerNameByAppNameRepoConfigAsync(repo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Configures the repository for build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repo'>
            /// The repository information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAppsByOwnerNameByAppNameRepoConfigAsync(this IBuildOperations operations, RepoInfo repo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppsByOwnerNameByAppNameRepoConfigWithHttpMessagesAsync(repo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the configuration for the respository
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object DeleteAppsByOwnerNameByAppNameRepoConfig(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).DeleteAppsByOwnerNameByAppNameRepoConfigAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the configuration for the respository
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAppsByOwnerNameByAppNameRepoConfigAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsByOwnerNameByAppNameRepoConfigWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns commit information for a batch of shas
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shaCollection'>
            /// A collection of commit SHAs comma-delimited
            /// </param>
            public static IList<Branch> GetAppsByOwnerNameByAppNameCommitsBatchByShaCollection(this IBuildOperations operations, string shaCollection)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppsByOwnerNameByAppNameCommitsBatchByShaCollectionAsync(shaCollection), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns commit information for a batch of shas
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shaCollection'>
            /// A collection of commit SHAs comma-delimited
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Branch>> GetAppsByOwnerNameByAppNameCommitsBatchByShaCollectionAsync(this IBuildOperations operations, string shaCollection, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameCommitsBatchByShaCollectionWithHttpMessagesAsync(shaCollection, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the build log
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetAppsByOwnerNameByAppNameBuildsByBuildIdLogs(this IBuildOperations operations)
            {
                Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppsByOwnerNameByAppNameBuildsByBuildIdLogsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the build log
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAppsByOwnerNameByAppNameBuildsByBuildIdLogsAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetAppsByOwnerNameByAppNameBuildsByBuildIdLogsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the download URI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='downloadType'>
            /// The download type. Possible values include: 'build', 'symbols', 'logs'
            /// </param>
            public static void GetAppsByOwnerNameByAppNameBuildsByBuildIdDownloadsByDownloadType(this IBuildOperations operations, string downloadType)
            {
                Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppsByOwnerNameByAppNameBuildsByBuildIdDownloadsByDownloadTypeAsync(downloadType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the download URI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='downloadType'>
            /// The download type. Possible values include: 'build', 'symbols', 'logs'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAppsByOwnerNameByAppNameBuildsByBuildIdDownloadsByDownloadTypeAsync(this IBuildOperations operations, string downloadType, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetAppsByOwnerNameByAppNameBuildsByBuildIdDownloadsByDownloadTypeWithHttpMessagesAsync(downloadType, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns the build detail for the given build ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Build GetAppsByOwnerNameByAppNameBuildsByBuildId(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppsByOwnerNameByAppNameBuildsByBuildIdAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the build detail for the given build ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Build> GetAppsByOwnerNameByAppNameBuildsByBuildIdAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameBuildsByBuildIdWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the build properties
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// </param>
            public static Build PatchAppsByOwnerNameByAppNameBuildsByBuildId(this IBuildOperations operations, BuildPatch properties)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).PatchAppsByOwnerNameByAppNameBuildsByBuildIdAsync(properties), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the build properties
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Build> PatchAppsByOwnerNameByAppNameBuildsByBuildIdAsync(this IBuildOperations operations, BuildPatch properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsByOwnerNameByAppNameBuildsByBuildIdWithHttpMessagesAsync(properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the projects in the repository for the branch, for all toolsets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='os'>
            /// The desired OS for the project scan; normally the same as the app OS.
            /// Possible values include: 'iOS', 'Android'
            /// </param>
            /// <param name='platform'>
            /// The desired platform for the project scan. Possible values include:
            /// 'Objective-C-Swift', 'React-Native', 'Xamarin', 'Java'
            /// </param>
            public static ToolsetProjects GetAppsByOwnerNameByAppNameBranchesByBranchToolsetProjects(this IBuildOperations operations, string os, string platform)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppsByOwnerNameByAppNameBranchesByBranchToolsetProjectsAsync(os, platform), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the projects in the repository for the branch, for all toolsets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='os'>
            /// The desired OS for the project scan; normally the same as the app OS.
            /// Possible values include: 'iOS', 'Android'
            /// </param>
            /// <param name='platform'>
            /// The desired platform for the project scan. Possible values include:
            /// 'Objective-C-Swift', 'React-Native', 'Xamarin', 'Java'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ToolsetProjects> GetAppsByOwnerNameByAppNameBranchesByBranchToolsetProjectsAsync(this IBuildOperations operations, string os, string platform, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameBranchesByBranchToolsetProjectsWithHttpMessagesAsync(os, platform, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the branch configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAppsByOwnerNameByAppNameBranchesByBranchConfig(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppsByOwnerNameByAppNameBranchesByBranchConfigAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the branch configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameBranchesByBranchConfigAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameBranchesByBranchConfigWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Configures the branch for build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, BranchProperties> PostAppsByOwnerNameByAppNameBranchesByBranchConfig(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).PostAppsByOwnerNameByAppNameBranchesByBranchConfigAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Configures the branch for build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, BranchProperties>> PostAppsByOwnerNameByAppNameBranchesByBranchConfigAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppsByOwnerNameByAppNameBranchesByBranchConfigWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reconfigures the branch for build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, BranchProperties> PutAppsByOwnerNameByAppNameBranchesByBranchConfig(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).PutAppsByOwnerNameByAppNameBranchesByBranchConfigAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reconfigures the branch for build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, BranchProperties>> PutAppsByOwnerNameByAppNameBranchesByBranchConfigAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutAppsByOwnerNameByAppNameBranchesByBranchConfigWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the branch build configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static SuccessResponse DeleteAppsByOwnerNameByAppNameBranchesByBranchConfig(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).DeleteAppsByOwnerNameByAppNameBranchesByBranchConfigAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the branch build configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SuccessResponse> DeleteAppsByOwnerNameByAppNameBranchesByBranchConfigAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsByOwnerNameByAppNameBranchesByBranchConfigWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the list of builds for the branch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Build> GetAppsByOwnerNameByAppNameBranchesByBranchBuilds(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppsByOwnerNameByAppNameBranchesByBranchBuildsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of builds for the branch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Build>> GetAppsByOwnerNameByAppNameBranchesByBranchBuildsAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameBranchesByBranchBuildsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='debug'>
            /// Run build in debug mode
            /// </param>
            public static IList<Build> PostAppsByOwnerNameByAppNameBranchesByBranchBuilds(this IBuildOperations operations, bool? debug = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).PostAppsByOwnerNameByAppNameBranchesByBranchBuildsAsync(debug), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a build
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='debug'>
            /// Run build in debug mode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Build>> PostAppsByOwnerNameByAppNameBranchesByBranchBuildsAsync(this IBuildOperations operations, bool? debug = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppsByOwnerNameByAppNameBranchesByBranchBuildsWithHttpMessagesAsync(debug, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the list of Git branches for this application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAppsByOwnerNameByAppNameBranches(this IBuildOperations operations)
            {
                return Task.Factory.StartNew(s => ((IBuildOperations)s).GetAppsByOwnerNameByAppNameBranchesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of Git branches for this application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameBranchesAsync(this IBuildOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameBranchesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
