// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Analytics.
    /// </summary>
    public static partial class AnalyticsExtensions
    {
            /// <summary>
            /// Count of active versions in the time range ordered by version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Versions Versions(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).VersionsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of active versions in the time range ordered by version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Versions> VersionsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VersionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of sessions per device in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static SessionsPerDevice PerDeviceCounts(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).PerDeviceCountsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of sessions per device in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SessionsPerDevice> PerDeviceCountsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PerDeviceCountsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets session duration .
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static SessionDurationsDistribution SessionDurationsDistribution(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).SessionDurationsDistributionAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets session duration .
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SessionDurationsDistribution> SessionDurationsDistributionAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SessionDurationsDistributionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of sessions in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static SessionCounts SessionCounts(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).SessionCountsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of sessions in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SessionCounts> SessionCountsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SessionCountsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Places in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Places PlaceCounts(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).PlaceCountsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Places in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Places> PlaceCountsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PlaceCountsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// OSes in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static OSes OperatingSystemCounts(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).OperatingSystemCountsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// OSes in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OSes> OperatingSystemCountsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OperatingSystemCountsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// models in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static AnalyticsModels ModelCounts(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).ModelCountsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// models in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalyticsModels> ModelCountsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ModelCountsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Logs received between the specified start time and the current time. The
            /// API will return a maximum of 100 logs per call.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LogContainer LogFlow(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).LogFlowAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Logs received between the specified start time and the current time. The
            /// API will return a maximum of 100 logs per call.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogContainer> LogFlowAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LogFlowWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// languages in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Languages LanguageCounts(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).LanguageCountsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// languages in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Languages> LanguageCountsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LanguageCountsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Event properties value counts during the time range in descending order.
            /// Limited up to 5 values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EventPropertyValues EventPropertyCounts(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).EventPropertyCountsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Event properties value counts during the time range in descending order.
            /// Limited up to 5 values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventPropertyValues> EventPropertyCountsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventPropertyCountsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Event properties.  Up to the first 5 received properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EventProperties EventProperties(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).EventPropertiesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Event properties.  Up to the first 5 received properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventProperties> EventPropertiesAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventPropertiesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of events by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EventCount EventCount(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).EventCountAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of events by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventCount> EventCountAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventCountWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of devices for an event by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EventDeviceCount EventDeviceCount(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).EventDeviceCountAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of devices for an event by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventDeviceCount> EventDeviceCountAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventDeviceCountWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of events per session by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EventCountPerSession EventPerSessionCount(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).EventPerSessionCountAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of events per session by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventCountPerSession> EventPerSessionCountAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventPerSessionCountWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of events per device by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EventCountPerDevice EventPerDeviceCount(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).EventPerDeviceCountAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of events per device by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventCountPerDevice> EventPerDeviceCountAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventPerDeviceCountWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of active events in the time range ordered by event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Events Events(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).EventsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of active events in the time range ordered by event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Events> EventsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Percentage of crash-free device by day in the time range based on the
            /// selected versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CrashFreeDevicePercentages CrashFreeDevicePercentages(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).CrashFreeDevicePercentagesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Percentage of crash-free device by day in the time range based on the
            /// selected versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashFreeDevicePercentages> CrashFreeDevicePercentagesAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashFreeDevicePercentagesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Overall crashes and affected users count of the selected crash group with
            /// selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CrashOverall CrashGroupTotals(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).CrashGroupTotalsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Overall crashes and affected users count of the selected crash group with
            /// selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashOverall> CrashGroupTotalsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashGroupTotalsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// top OSes of the selected crash group with selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CrashGroupOperatingSystems CrashGroupOperatingSystemCounts(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).CrashGroupOperatingSystemCountsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// top OSes of the selected crash group with selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashGroupOperatingSystems> CrashGroupOperatingSystemCountsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashGroupOperatingSystemCountsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// top models of the selected crash group with selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CrashGroupModels CrashGroupModelCounts(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).CrashGroupModelCountsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// top models of the selected crash group with selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashGroupModels> CrashGroupModelCountsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashGroupModelCountsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of crashes by day in the time range of the selected crash group with
            /// selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CrashCounts CrashGroupCounts(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).CrashGroupCountsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of crashes by day in the time range of the selected crash group with
            /// selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashCounts> CrashGroupCountsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashGroupCountsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Overall crashes and affected users count of the selected crash groups with
            /// selected versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CrashesOverallItem> CrashGroupsTotals(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).CrashGroupsTotalsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Overall crashes and affected users count of the selected crash groups with
            /// selected versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CrashesOverallItem>> CrashGroupsTotalsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashGroupsTotalsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of crashes by day in the time range based the selected versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CrashCounts CrashCounts(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).CrashCountsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of crashes by day in the time range based the selected versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashCounts> CrashCountsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashCountsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of active devices by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ActiveDeviceCounts DeviceCounts(this IAnalytics operations)
            {
                return Task.Factory.StartNew(s => ((IAnalytics)s).DeviceCountsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of active devices by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActiveDeviceCounts> DeviceCountsAsync(this IAnalytics operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeviceCountsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
