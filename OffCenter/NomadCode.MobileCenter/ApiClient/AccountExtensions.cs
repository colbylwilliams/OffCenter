// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Account.
    /// </summary>
    public static partial class AccountExtensions
    {
            /// <summary>
            /// Accepts all pending invitations to distribution groups for the specified
            /// user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ErrorResponse AcceptGroupsInvitation(this IAccount operations)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).AcceptGroupsInvitationAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Accepts all pending invitations to distribution groups for the specified
            /// user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> AcceptGroupsInvitationAsync(this IAccount operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AcceptGroupsInvitationWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Rejects a pending invitation for the specified user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invitationToken'>
            /// The app invitation token that was sent to the user
            /// </param>
            public static ErrorResponse RejectInvitation(this IAccount operations, string invitationToken)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).RejectInvitationAsync(invitationToken), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rejects a pending invitation for the specified user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invitationToken'>
            /// The app invitation token that was sent to the user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> RejectInvitationAsync(this IAccount operations, string invitationToken, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RejectInvitationWithHttpMessagesAsync(invitationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Accepts a pending invitation for the specified user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invitationToken'>
            /// The app invitation token that was sent to the user
            /// </param>
            public static ErrorResponse AcceptInvitation(this IAccount operations, string invitationToken)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).AcceptInvitationAsync(invitationToken), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Accepts a pending invitation for the specified user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invitationToken'>
            /// The app invitation token that was sent to the user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> AcceptInvitationAsync(this IAccount operations, string invitationToken, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AcceptInvitationWithHttpMessagesAsync(invitationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the user profile data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetUserProfile(this IAccount operations)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetUserProfileAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the user profile data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserProfileAsync(this IAccount operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserProfileWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the user profile and returns the updated user data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The data for the created user
            /// </param>
            public static object UpdateUserProfile(this IAccount operations, UserUpdateRequest user)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).UpdateUserProfileAsync(user), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the user profile and returns the updated user data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The data for the created user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateUserProfileAsync(this IAccount operations, UserUpdateRequest user, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserProfileWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the user from the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='userEmail'>
            /// The email of the user to Invites
            /// </param>
            public static ErrorResponse DeleteAppUser(this IAccount operations, string ownerName, string appName, string userEmail)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).DeleteAppUserAsync(ownerName, appName, userEmail), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the user from the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='userEmail'>
            /// The email of the user to Invites
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteAppUserAsync(this IAccount operations, string ownerName, string appName, string userEmail, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppUserWithHttpMessagesAsync(ownerName, appName, userEmail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the users associated with the app specified with the given app
            /// name which belongs to the given owner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            public static object GetAppUsers(this IAccount operations, string ownerName, string appName)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAppUsersAsync(ownerName, appName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the users associated with the app specified with the given app
            /// name which belongs to the given owner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppUsersAsync(this IAccount operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppUsersWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the testers associated with the app specified with the given app
            /// name which belongs to the given owner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            public static object GetAppTesters(this IAccount operations, string ownerName, string appName)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAppTestersAsync(ownerName, appName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the testers associated with the app specified with the given app
            /// name which belongs to the given owner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppTestersAsync(this IAccount operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppTestersWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invites a new or existing user to an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='userEmail'>
            /// The email of the user to Invites
            /// </param>
            public static ErrorResponse InviteAppUser(this IAccount operations, string ownerName, string appName, string userEmail)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).InviteAppUserAsync(ownerName, appName, userEmail), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invites a new or existing user to an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='userEmail'>
            /// The email of the user to Invites
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> InviteAppUserAsync(this IAccount operations, string ownerName, string appName, string userEmail, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InviteAppUserWithHttpMessagesAsync(ownerName, appName, userEmail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a user's invitation to an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='userEmail'>
            /// The email of the user to Invites
            /// </param>
            public static ErrorResponse DeleteAppInvitation(this IAccount operations, string ownerName, string appName, string userEmail)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).DeleteAppInvitationAsync(ownerName, appName, userEmail), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a user's invitation to an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='userEmail'>
            /// The email of the user to Invites
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteAppInvitationAsync(this IAccount operations, string ownerName, string appName, string userEmail, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppInvitationWithHttpMessagesAsync(ownerName, appName, userEmail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the pending invitations for the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            public static object GetAppInvitations(this IAccount operations, string ownerName, string appName)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAppInvitationsAsync(ownerName, appName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the pending invitations for the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppInvitationsAsync(this IAccount operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppInvitationsWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of member details in the distribution group specified
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='excludePendingInvitations'>
            /// Whether to exclude pending invitations in the response
            /// </param>
            public static object GetAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameMembers(this IAccount operations, string ownerName, string appName, string distributionGroupName, bool? excludePendingInvitations = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameMembersAsync(ownerName, appName, distributionGroupName, excludePendingInvitations), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of member details in the distribution group specified
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='excludePendingInvitations'>
            /// Whether to exclude pending invitations in the response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameMembersAsync(this IAccount operations, string ownerName, string appName, string distributionGroupName, bool? excludePendingInvitations = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameMembersWithHttpMessagesAsync(ownerName, appName, distributionGroupName, excludePendingInvitations, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds the members to the specified distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            public static object PostAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameMembers(this IAccount operations, string ownerName, string appName, string distributionGroupName, DistributionGroupUserRequest members)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).PostAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameMembersAsync(ownerName, appName, distributionGroupName, members), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds the members to the specified distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameMembersAsync(this IAccount operations, string ownerName, string appName, string distributionGroupName, DistributionGroupUserRequest members, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameMembersWithHttpMessagesAsync(ownerName, appName, distributionGroupName, members, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove the users from the distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            public static object DeleteAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameMembers(this IAccount operations, string ownerName, string appName, string distributionGroupName, DistributionGroupUserRequest members)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).DeleteAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameMembersAsync(ownerName, appName, distributionGroupName, members), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove the users from the distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameMembersAsync(this IAccount operations, string ownerName, string appName, string distributionGroupName, DistributionGroupUserRequest members, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameMembersWithHttpMessagesAsync(ownerName, appName, distributionGroupName, members, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a single distribution group for a given distribution group name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            public static object GetAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupName(this IAccount operations, string ownerName, string appName, string distributionGroupName)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameAsync(ownerName, appName, distributionGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a single distribution group for a given distribution group name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameAsync(this IAccount operations, string ownerName, string appName, string distributionGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameWithHttpMessagesAsync(ownerName, appName, distributionGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the attributes of distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='distributionGroup'>
            /// The attributes to update for the distribution group
            /// </param>
            public static object PatchAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupName(this IAccount operations, string ownerName, string appName, string distributionGroupName, DistributionGroupPatchRequest distributionGroup)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).PatchAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameAsync(ownerName, appName, distributionGroupName, distributionGroup), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the attributes of distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='distributionGroup'>
            /// The attributes to update for the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PatchAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameAsync(this IAccount operations, string ownerName, string appName, string distributionGroupName, DistributionGroupPatchRequest distributionGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameWithHttpMessagesAsync(ownerName, appName, distributionGroupName, distributionGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            public static ErrorResponse DeleteAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupName(this IAccount operations, string appName, string ownerName, string distributionGroupName)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).DeleteAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameAsync(appName, ownerName, distributionGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameAsync(this IAccount operations, string appName, string ownerName, string distributionGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsByOwnerNameByAppNameDistributionGroupsByDistributionGroupNameWithHttpMessagesAsync(appName, ownerName, distributionGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of distribution groups in the app specified
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            public static object GetAppsByOwnerNameByAppNameDistributionGroups(this IAccount operations, string ownerName, string appName)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAppsByOwnerNameByAppNameDistributionGroupsAsync(ownerName, appName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of distribution groups in the app specified
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameDistributionGroupsAsync(this IAccount operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameDistributionGroupsWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new distribution group and returns it to the caller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='distributionGroup'>
            /// The data for the distribution group
            /// </param>
            public static object PostAppsByOwnerNameByAppNameDistributionGroups(this IAccount operations, string ownerName, string appName, DistributionGroupRequest distributionGroup)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).PostAppsByOwnerNameByAppNameDistributionGroupsAsync(ownerName, appName, distributionGroup), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new distribution group and returns it to the caller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='distributionGroup'>
            /// The data for the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAppsByOwnerNameByAppNameDistributionGroupsAsync(this IAccount operations, string ownerName, string appName, DistributionGroupRequest distributionGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppsByOwnerNameByAppNameDistributionGroupsWithHttpMessagesAsync(ownerName, appName, distributionGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return a specific app with the given app name which belongs to the given
            /// owner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            public static object GetApp(this IAccount operations, string ownerName, string appName)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAppAsync(ownerName, appName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return a specific app with the given app name which belongs to the given
            /// owner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppAsync(this IAccount operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Partially updates a single app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='app'>
            /// The partial data for the app
            /// </param>
            public static object UpdateApp(this IAccount operations, string appName, string ownerName, AppPatchRequest app = default(AppPatchRequest))
            {
                return Task.Factory.StartNew(s => ((IAccount)s).UpdateAppAsync(appName, ownerName, app), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Partially updates a single app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='app'>
            /// The partial data for the app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAppAsync(this IAccount operations, string appName, string ownerName, AppPatchRequest app = default(AppPatchRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAppWithHttpMessagesAsync(appName, ownerName, app, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            public static ErrorResponse DeleteApp(this IAccount operations, string appName, string ownerName)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).DeleteAppAsync(appName, ownerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The slug name of the app
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteAppAsync(this IAccount operations, string appName, string ownerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppWithHttpMessagesAsync(appName, ownerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new app and returns it to the caller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='app'>
            /// The data for the app
            /// </param>
            public static object CreateApp(this IAccount operations, AppRequest app)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).CreateAppAsync(app), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new app and returns it to the caller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='app'>
            /// The data for the app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAppAsync(this IAccount operations, AppRequest app, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppWithHttpMessagesAsync(app, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of apps
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetApps(this IAccount operations)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAppsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of apps
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsAsync(this IAccount operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the api_token object with the specific id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiTokenId'>
            /// The unique ID (UUID) of the api token
            /// </param>
            public static ErrorResponse DeleteApiToken(this IAccount operations, string apiTokenId)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).DeleteApiTokenAsync(apiTokenId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the api_token object with the specific id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiTokenId'>
            /// The unique ID (UUID) of the api token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteApiTokenAsync(this IAccount operations, string apiTokenId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteApiTokenWithHttpMessagesAsync(apiTokenId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns api tokens for the authenticated user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetApiTokens(this IAccount operations)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetApiTokensAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns api tokens for the authenticated user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetApiTokensAsync(this IAccount operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApiTokensWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new API token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='description'>
            /// Description of the token
            /// </param>
            public static object CreateApiToken(this IAccount operations, ApiTokensCreateRequest description = default(ApiTokensCreateRequest))
            {
                return Task.Factory.StartNew(s => ((IAccount)s).CreateApiTokenAsync(description), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new API token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='description'>
            /// Description of the token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateApiTokenAsync(this IAccount operations, ApiTokensCreateRequest description = default(ApiTokensCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateApiTokenWithHttpMessagesAsync(description, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
