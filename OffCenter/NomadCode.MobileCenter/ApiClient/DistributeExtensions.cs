// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Distribute.
    /// </summary>
    public static partial class DistributeExtensions
    {
            /// <summary>
            /// Get a release with id `release_id`. if `release_id` is `latest`, return
            /// the latest release that was distributed to the current user (from all the
            /// distribution groups).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releaseId'>
            /// The ID of the release, or `latest` to get the latest release from all the
            /// distribution groups assigned to the current user.
            /// </param>
            public static object GetReleaseOrLatestRelease(this IDistribute operations, string releaseId)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).GetReleaseOrLatestReleaseAsync(releaseId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a release with id `release_id`. if `release_id` is `latest`, return
            /// the latest release that was distributed to the current user (from all the
            /// distribution groups).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releaseId'>
            /// The ID of the release, or `latest` to get the latest release from all the
            /// distribution groups assigned to the current user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetReleaseOrLatestReleaseAsync(this IDistribute operations, string releaseId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReleaseOrLatestReleaseWithHttpMessagesAsync(releaseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a release.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releaseId'>
            /// The ID of the release
            /// </param>
            /// <param name='body'>
            /// The release information.
            /// </param>
            public static object PatchAppsByOwnerNameByAppNameReleasesByReleaseId(this IDistribute operations, double releaseId, ReleaseUpdateRequest body)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).PatchAppsByOwnerNameByAppNameReleasesByReleaseIdAsync(releaseId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a release.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releaseId'>
            /// The ID of the release
            /// </param>
            /// <param name='body'>
            /// The release information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PatchAppsByOwnerNameByAppNameReleasesByReleaseIdAsync(this IDistribute operations, double releaseId, ReleaseUpdateRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsByOwnerNameByAppNameReleasesByReleaseIdWithHttpMessagesAsync(releaseId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a release.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releaseId'>
            /// The ID of the release
            /// </param>
            public static ErrorDetails DeleteAppsByOwnerNameByAppNameReleasesByReleaseId(this IDistribute operations, string releaseId)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).DeleteAppsByOwnerNameByAppNameReleasesByReleaseIdAsync(releaseId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a release.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releaseId'>
            /// The ID of the release
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorDetails> DeleteAppsByOwnerNameByAppNameReleasesByReleaseIdAsync(this IDistribute operations, string releaseId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsByOwnerNameByAppNameReleasesByReleaseIdWithHttpMessagesAsync(releaseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return detailed information about releases.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publishedOnly'>
            /// when true, filters out releases that were uplaoded but were never
            /// distributed. Releases that under deleted distribution groups will not be
            /// filtered out.
            /// </param>
            /// <param name='filter'>
            /// OBSOLETE. Will be removed in next version. An OData style filter.
            /// Currently only support the 'eq' comparision type. E.g. ?$filter=status eq
            /// 'Available'
            /// </param>
            public static IList<ReleaseDetails> GetAppsByOwnerNameByAppNameReleases(this IDistribute operations, bool? publishedOnly = default(bool?), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).GetAppsByOwnerNameByAppNameReleasesAsync(publishedOnly, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return detailed information about releases.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publishedOnly'>
            /// when true, filters out releases that were uplaoded but were never
            /// distributed. Releases that under deleted distribution groups will not be
            /// filtered out.
            /// </param>
            /// <param name='filter'>
            /// OBSOLETE. Will be removed in next version. An OData style filter.
            /// Currently only support the 'eq' comparision type. E.g. ?$filter=status eq
            /// 'Available'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ReleaseDetails>> GetAppsByOwnerNameByAppNameReleasesAsync(this IDistribute operations, bool? publishedOnly = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameReleasesWithHttpMessagesAsync(publishedOnly, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Commits or aborts the upload process for a release for the specified
            /// application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadId'>
            /// The ID of the upload
            /// </param>
            /// <param name='body'>
            /// The release information
            /// </param>
            public static ReleaseUploadEndResponse PatchAppsByOwnerNameByAppNameReleaseUploadsByUploadId(this IDistribute operations, string uploadId, ReleaseUploadEndRequest body)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).PatchAppsByOwnerNameByAppNameReleaseUploadsByUploadIdAsync(uploadId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Commits or aborts the upload process for a release for the specified
            /// application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadId'>
            /// The ID of the upload
            /// </param>
            /// <param name='body'>
            /// The release information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReleaseUploadEndResponse> PatchAppsByOwnerNameByAppNameReleaseUploadsByUploadIdAsync(this IDistribute operations, string uploadId, ReleaseUploadEndRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsByOwnerNameByAppNameReleaseUploadsByUploadIdWithHttpMessagesAsync(uploadId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Begins the upload process for a new release for the specified application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ReleaseUploadBeginResponse PostAppsByOwnerNameByAppNameReleaseUploads(this IDistribute operations)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).PostAppsByOwnerNameByAppNameReleaseUploadsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Begins the upload process for a new release for the specified application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReleaseUploadBeginResponse> PostAppsByOwnerNameByAppNameReleaseUploadsAsync(this IDistribute operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppsByOwnerNameByAppNameReleaseUploadsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the latest release from every distribution group associated with an
            /// application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<BasicReleaseDetails> GetLatestReleases(this IDistribute operations)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).GetLatestReleasesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the latest release from every distribution group associated with an
            /// application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BasicReleaseDetails>> GetLatestReleasesAsync(this IDistribute operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestReleasesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the latest package from every distribution group associated with an
            /// application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<BasicPackageDetails> GetLatestPackages(this IDistribute operations)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).GetLatestPackagesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the latest package from every distribution group associated with an
            /// application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BasicPackageDetails>> GetLatestPackagesAsync(this IDistribute operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestPackagesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a package with id 'package_id'. if 'package_id' is 'latest', return
            /// the latest package that was distributed to the current user (from all the
            /// distribution groups).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='packageId'>
            /// The ID of the package, or 'latest' to get the latest package from all the
            /// distribution groups assigned to the current user.
            /// </param>
            public static object GetPackageOrLatestPackage(this IDistribute operations, string packageId)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).GetPackageOrLatestPackageAsync(packageId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a package with id 'package_id'. if 'package_id' is 'latest', return
            /// the latest package that was distributed to the current user (from all the
            /// distribution groups).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='packageId'>
            /// The ID of the package, or 'latest' to get the latest package from all the
            /// distribution groups assigned to the current user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPackageOrLatestPackageAsync(this IDistribute operations, string packageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPackageOrLatestPackageWithHttpMessagesAsync(packageId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='packageId'>
            /// The ID of the package
            /// </param>
            /// <param name='body'>
            /// The package information.
            /// </param>
            public static object PatchAppsByOwnerNameByAppNamePackagesByPackageId(this IDistribute operations, double packageId, PackageUpdateRequest body)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).PatchAppsByOwnerNameByAppNamePackagesByPackageIdAsync(packageId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='packageId'>
            /// The ID of the package
            /// </param>
            /// <param name='body'>
            /// The package information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PatchAppsByOwnerNameByAppNamePackagesByPackageIdAsync(this IDistribute operations, double packageId, PackageUpdateRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsByOwnerNameByAppNamePackagesByPackageIdWithHttpMessagesAsync(packageId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='packageId'>
            /// The ID of the package
            /// </param>
            public static ErrorDetails DeleteAppsByOwnerNameByAppNamePackagesByPackageId(this IDistribute operations, string packageId)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).DeleteAppsByOwnerNameByAppNamePackagesByPackageIdAsync(packageId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='packageId'>
            /// The ID of the package
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorDetails> DeleteAppsByOwnerNameByAppNamePackagesByPackageIdAsync(this IDistribute operations, string packageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsByOwnerNameByAppNamePackagesByPackageIdWithHttpMessagesAsync(packageId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return detailed information about packages.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publishedOnly'>
            /// when true, filters out packages that were uplaoded but were never
            /// distributed. Packages that under deleted distribution groups will not be
            /// filtered out.
            /// </param>
            /// <param name='filter'>
            /// OBSOLETE. Will be removed in next version. An OData style filter.
            /// Currently only support the 'eq' comparision type. E.g. ?$filter=status eq
            /// 'Available'
            /// </param>
            public static IList<PackageDetails> GetAppsByOwnerNameByAppNamePackages(this IDistribute operations, bool? publishedOnly = default(bool?), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).GetAppsByOwnerNameByAppNamePackagesAsync(publishedOnly, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return detailed information about packages.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publishedOnly'>
            /// when true, filters out packages that were uplaoded but were never
            /// distributed. Packages that under deleted distribution groups will not be
            /// filtered out.
            /// </param>
            /// <param name='filter'>
            /// OBSOLETE. Will be removed in next version. An OData style filter.
            /// Currently only support the 'eq' comparision type. E.g. ?$filter=status eq
            /// 'Available'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PackageDetails>> GetAppsByOwnerNameByAppNamePackagesAsync(this IDistribute operations, bool? publishedOnly = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNamePackagesWithHttpMessagesAsync(publishedOnly, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Commits or aborts the upload process for a package for the specified
            /// application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadId'>
            /// The ID of the upload
            /// </param>
            /// <param name='body'>
            /// The package information
            /// </param>
            public static PackageUploadEndResponse PatchAppsByOwnerNameByAppNamePackageUploadsByUploadId(this IDistribute operations, string uploadId, PackageUploadEndRequest body)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).PatchAppsByOwnerNameByAppNamePackageUploadsByUploadIdAsync(uploadId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Commits or aborts the upload process for a package for the specified
            /// application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadId'>
            /// The ID of the upload
            /// </param>
            /// <param name='body'>
            /// The package information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageUploadEndResponse> PatchAppsByOwnerNameByAppNamePackageUploadsByUploadIdAsync(this IDistribute operations, string uploadId, PackageUploadEndRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsByOwnerNameByAppNamePackageUploadsByUploadIdWithHttpMessagesAsync(uploadId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Begins the upload process for a new package for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PackageUploadBeginResponse PostAppsByOwnerNameByAppNamePackageUploads(this IDistribute operations)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).PostAppsByOwnerNameByAppNamePackageUploadsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Begins the upload process for a new package for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageUploadBeginResponse> PostAppsByOwnerNameByAppNamePackageUploadsAsync(this IDistribute operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppsByOwnerNameByAppNamePackageUploadsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return detailed information about a distributed release in a given
            /// distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='releaseId'>
            /// Must be `latest`, a specific `release_id` is not supported at this time.
            /// </param>
            public static object GetLatestReleaseForDistributionGroup(this IDistribute operations, string distributionGroupName, string releaseId)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).GetLatestReleaseForDistributionGroupAsync(distributionGroupName, releaseId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return detailed information about a distributed release in a given
            /// distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='releaseId'>
            /// Must be `latest`, a specific `release_id` is not supported at this time.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLatestReleaseForDistributionGroupAsync(this IDistribute operations, string distributionGroupName, string releaseId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestReleaseForDistributionGroupWithHttpMessagesAsync(distributionGroupName, releaseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a release with id 'release_id' in a given distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='releaseId'>
            /// The ID identifying the unique release.
            /// </param>
            public static object DeleteReleaseForDistributionGroup(this IDistribute operations, string distributionGroupName, string releaseId)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).DeleteReleaseForDistributionGroupAsync(distributionGroupName, releaseId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a release with id 'release_id' in a given distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='releaseId'>
            /// The ID identifying the unique release.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteReleaseForDistributionGroupAsync(this IDistribute operations, string distributionGroupName, string releaseId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteReleaseForDistributionGroupWithHttpMessagesAsync(distributionGroupName, releaseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return detailed information about distributed releases in a given
            /// distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            public static object GetReleasesForDistributionGroup(this IDistribute operations, string distributionGroupName)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).GetReleasesForDistributionGroupAsync(distributionGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return detailed information about distributed releases in a given
            /// distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetReleasesForDistributionGroupAsync(this IDistribute operations, string distributionGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReleasesForDistributionGroupWithHttpMessagesAsync(distributionGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return detailed information about a distributed package in a given
            /// distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='packageId'>
            /// For GET calls, this must be 'latest', specific package_id's are not
            /// supported at this time.
            /// </param>
            public static object GetLatestPackageForDistributionGroup(this IDistribute operations, string distributionGroupName, string packageId)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).GetLatestPackageForDistributionGroupAsync(distributionGroupName, packageId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return detailed information about a distributed package in a given
            /// distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='packageId'>
            /// For GET calls, this must be 'latest', specific package_id's are not
            /// supported at this time.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLatestPackageForDistributionGroupAsync(this IDistribute operations, string distributionGroupName, string packageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestPackageForDistributionGroupWithHttpMessagesAsync(distributionGroupName, packageId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return detailed information about distributed packages in a given
            /// distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            public static object GetPackagesForDistributionGroup(this IDistribute operations, string distributionGroupName)
            {
                return Task.Factory.StartNew(s => ((IDistribute)s).GetPackagesForDistributionGroupAsync(distributionGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return detailed information about distributed packages in a given
            /// distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPackagesForDistributionGroupAsync(this IDistribute operations, string distributionGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPackagesForDistributionGroupWithHttpMessagesAsync(distributionGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
