// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Data.
    /// </summary>
    public static partial class DataExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataById(this IData operations, string subscriptionId, string tableName, string id)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataByIdAsync(subscriptionId, tableName, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataByIdAsync(this IData operations, string subscriptionId, string tableName, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataByIdWithHttpMessagesAsync(subscriptionId, tableName, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='permanent'>
            /// </param>
            public static object DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataById(this IData operations, string subscriptionId, string tableName, string id, bool? permanent = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IData)s).DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataByIdAsync(subscriptionId, tableName, id, permanent), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='permanent'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataByIdAsync(this IData operations, string subscriptionId, string tableName, string id, bool? permanent = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataByIdWithHttpMessagesAsync(subscriptionId, tableName, id, permanent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='sort'>
            /// </param>
            public static object GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameData(this IData operations, string subscriptionId, string tableName, int? skip = default(int?), int? take = default(int?), string sort = default(string))
            {
                return Task.Factory.StartNew(s => ((IData)s).GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataAsync(subscriptionId, tableName, skip, take, sort), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='sort'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataAsync(this IData operations, string subscriptionId, string tableName, int? skip = default(int?), int? take = default(int?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataWithHttpMessagesAsync(subscriptionId, tableName, skip, take, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='import'>
            /// </param>
            public static object PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameData(this IData operations, string subscriptionId, string tableName, ImportDataContainer import)
            {
                return Task.Factory.StartNew(s => ((IData)s).PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataAsync(subscriptionId, tableName, import), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='import'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataAsync(this IData operations, string subscriptionId, string tableName, ImportDataContainer import, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataWithHttpMessagesAsync(subscriptionId, tableName, import, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            public static object DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameData(this IData operations, string subscriptionId, string tableName)
            {
                return Task.Factory.StartNew(s => ((IData)s).DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataAsync(subscriptionId, tableName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataAsync(this IData operations, string subscriptionId, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameDataWithHttpMessagesAsync(subscriptionId, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            public static object GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsByColumnName(this IData operations, string subscriptionId, string tableName, string columnName)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsByColumnNameAsync(subscriptionId, tableName, columnName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsByColumnNameAsync(this IData operations, string subscriptionId, string tableName, string columnName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsByColumnNameWithHttpMessagesAsync(subscriptionId, tableName, columnName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            /// <param name='column'>
            /// </param>
            public static object PutAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsByColumnName(this IData operations, string subscriptionId, string tableName, string columnName, TableColumn column)
            {
                return Task.Factory.StartNew(s => ((IData)s).PutAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsByColumnNameAsync(subscriptionId, tableName, columnName, column), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            /// <param name='column'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsByColumnNameAsync(this IData operations, string subscriptionId, string tableName, string columnName, TableColumn column, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsByColumnNameWithHttpMessagesAsync(subscriptionId, tableName, columnName, column, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            public static object DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsByColumnName(this IData operations, string subscriptionId, string tableName, string columnName)
            {
                return Task.Factory.StartNew(s => ((IData)s).DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsByColumnNameAsync(subscriptionId, tableName, columnName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsByColumnNameAsync(this IData operations, string subscriptionId, string tableName, string columnName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsByColumnNameWithHttpMessagesAsync(subscriptionId, tableName, columnName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            public static object GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumns(this IData operations, string subscriptionId, string tableName)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsAsync(subscriptionId, tableName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsAsync(this IData operations, string subscriptionId, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsWithHttpMessagesAsync(subscriptionId, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='column'>
            /// </param>
            public static object PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumns(this IData operations, string subscriptionId, string tableName, TableColumn column)
            {
                return Task.Factory.StartNew(s => ((IData)s).PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsAsync(subscriptionId, tableName, column), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='column'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsAsync(this IData operations, string subscriptionId, string tableName, TableColumn column, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameColumnsWithHttpMessagesAsync(subscriptionId, tableName, column, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            public static object GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableName(this IData operations, string subscriptionId, string tableName)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameAsync(subscriptionId, tableName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameAsync(this IData operations, string subscriptionId, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameWithHttpMessagesAsync(subscriptionId, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='table'>
            /// </param>
            public static object PutAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableName(this IData operations, string subscriptionId, string tableName, Table table)
            {
                return Task.Factory.StartNew(s => ((IData)s).PutAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameAsync(subscriptionId, tableName, table), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='table'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameAsync(this IData operations, string subscriptionId, string tableName, Table table, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameWithHttpMessagesAsync(subscriptionId, tableName, table, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            public static object DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableName(this IData operations, string subscriptionId, string tableName)
            {
                return Task.Factory.StartNew(s => ((IData)s).DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameAsync(subscriptionId, tableName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameAsync(this IData operations, string subscriptionId, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesByTableNameWithHttpMessagesAsync(subscriptionId, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTables(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesAsync(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesAsync(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='table'>
            /// </param>
            public static object PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTables(this IData operations, string subscriptionId, Table table)
            {
                return Task.Factory.StartNew(s => ((IData)s).PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesAsync(subscriptionId, table), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='table'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesAsync(this IData operations, string subscriptionId, Table table, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdTablesWithHttpMessagesAsync(subscriptionId, table, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdResourcesOperations(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdResourcesOperationsAsync(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdResourcesOperationsAsync(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdResourcesOperationsWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdResources(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdResourcesAsync(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdResourcesAsync(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdResourcesWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdResources(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdResourcesAsync(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdResourcesAsync(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdResourcesWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdPing(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdPingAsync(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdPingAsync(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdPingWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdIdentity(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdIdentityAsync(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdIdentityAsync(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdIdentityWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static object PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdIdentity(this IData operations, string subscriptionId)
            {
                return Task.Factory.StartNew(s => ((IData)s).PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdIdentityAsync(subscriptionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdIdentityAsync(this IData operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppsByOwnerNameByAppNameSubscriptionsBySubscriptionIdIdentityWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
