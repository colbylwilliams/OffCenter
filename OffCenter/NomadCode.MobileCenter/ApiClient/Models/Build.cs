// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Build
    {
        /// <summary>
        /// Initializes a new instance of the Build class.
        /// </summary>
        public Build() { }

        /// <summary>
        /// Initializes a new instance of the Build class.
        /// </summary>
        public Build(int id, string buildNumber, string queueTime, string status, string result, string sourceBranch, string sourceVersion, string startTime = default(string), string finishTime = default(string), string lastChangedDate = default(string))
        {
            Id = id;
            BuildNumber = buildNumber;
            QueueTime = queueTime;
            StartTime = startTime;
            FinishTime = finishTime;
            LastChangedDate = lastChangedDate;
            Status = status;
            Result = result;
            SourceBranch = sourceBranch;
            SourceVersion = sourceVersion;
        }

        /// <summary>
        /// The build ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// The build number
        /// </summary>
        [JsonProperty(PropertyName = "buildNumber")]
        public string BuildNumber { get; set; }

        /// <summary>
        /// The time the build was queued
        /// </summary>
        [JsonProperty(PropertyName = "queueTime")]
        public string QueueTime { get; set; }

        /// <summary>
        /// The time the build was started
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public string StartTime { get; set; }

        /// <summary>
        /// The time the build was finished
        /// </summary>
        [JsonProperty(PropertyName = "finishTime")]
        public string FinishTime { get; set; }

        /// <summary>
        /// The time the build status was last changed
        /// </summary>
        [JsonProperty(PropertyName = "lastChangedDate")]
        public string LastChangedDate { get; set; }

        /// <summary>
        /// The build status
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// The build result
        /// </summary>
        [JsonProperty(PropertyName = "result")]
        public string Result { get; set; }

        /// <summary>
        /// The source branch name
        /// </summary>
        [JsonProperty(PropertyName = "sourceBranch")]
        public string SourceBranch { get; set; }

        /// <summary>
        /// The source SHA
        /// </summary>
        [JsonProperty(PropertyName = "sourceVersion")]
        public string SourceVersion { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (BuildNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BuildNumber");
            }
            if (QueueTime == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "QueueTime");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (Result == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Result");
            }
            if (SourceBranch == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceBranch");
            }
            if (SourceVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceVersion");
            }
            if (this.Id <= 0)
            {
                throw new ValidationException(ValidationRules.ExclusiveMinimum, "Id", 0);
            }
        }
    }
}
