// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class LogContainer
    {
        /// <summary>
        /// Initializes a new instance of the LogContainer class.
        /// </summary>
        public LogContainer() { }

        /// <summary>
        /// Initializes a new instance of the LogContainer class.
        /// </summary>
        public LogContainer(IList<Log> logs, bool? exceededMaxLimit = default(bool?), DateTime? lastReceivedLogTimestamp = default(DateTime?))
        {
            ExceededMaxLimit = exceededMaxLimit;
            LastReceivedLogTimestamp = lastReceivedLogTimestamp;
            Logs = logs;
        }

        /// <summary>
        /// indicates if the number of available logs are more than the max
        /// allowed return limit(100).
        /// </summary>
        [JsonProperty(PropertyName = "exceeded_max_limit")]
        public bool? ExceededMaxLimit { get; set; }

        /// <summary>
        /// the timestamp of the last log received. This value can be used as
        /// the start time parameter in the consecutive API call.
        /// </summary>
        [JsonProperty(PropertyName = "last_received_log_timestamp")]
        public DateTime? LastReceivedLogTimestamp { get; set; }

        /// <summary>
        /// the list of logs
        /// </summary>
        [JsonProperty(PropertyName = "logs")]
        public IList<Log> Logs { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Logs == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Logs");
            }
            if (this.Logs != null)
            {
                if (this.Logs.Count < 0)
                {
                    throw new ValidationException(ValidationRules.MinItems, "Logs", 0);
                }
                foreach (var element in this.Logs)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
