// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class CrashGroup
    {
        /// <summary>
        /// Initializes a new instance of the CrashGroup class.
        /// </summary>
        public CrashGroup() { }

        /// <summary>
        /// Initializes a new instance of the CrashGroup class.
        /// </summary>
        public CrashGroup(string crashGroupId, string displayId, string appVersion, string status, int count, DateTime firstOccurrence, DateTime lastOccurrence, string errorReason, bool fatal, int? impactedUsers = default(int?), string exception = default(string), ReasonStackFrame reasonFrame = default(ReasonStackFrame))
        {
            CrashGroupId = crashGroupId;
            DisplayId = displayId;
            AppVersion = appVersion;
            Status = status;
            Count = count;
            ImpactedUsers = impactedUsers;
            FirstOccurrence = firstOccurrence;
            LastOccurrence = lastOccurrence;
            Exception = exception;
            ErrorReason = errorReason;
            ReasonFrame = reasonFrame;
            Fatal = fatal;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "crash_group_id")]
        public string CrashGroupId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "display_id")]
        public string DisplayId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "app_version")]
        public string AppVersion { get; set; }

        /// <summary>
        /// Possible values include: 'open', 'closed', 'ignored'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int Count { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "impacted_users")]
        public int? ImpactedUsers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "first_occurrence")]
        public DateTime FirstOccurrence { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "last_occurrence")]
        public DateTime LastOccurrence { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exception")]
        public string Exception { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "error_reason")]
        public string ErrorReason { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reason_frame")]
        public ReasonStackFrame ReasonFrame { get; set; }

        /// <summary>
        /// Crash or handled exception
        /// </summary>
        [JsonProperty(PropertyName = "fatal")]
        public bool Fatal { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (CrashGroupId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CrashGroupId");
            }
            if (DisplayId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayId");
            }
            if (AppVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppVersion");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (ErrorReason == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ErrorReason");
            }
        }
    }
}
