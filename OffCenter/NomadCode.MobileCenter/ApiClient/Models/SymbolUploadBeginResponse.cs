// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// A response containing information pertaining to starting a symbol
    /// upload process
    /// </summary>
    public partial class SymbolUploadBeginResponse
    {
        /// <summary>
        /// Initializes a new instance of the SymbolUploadBeginResponse class.
        /// </summary>
        public SymbolUploadBeginResponse() { }

        /// <summary>
        /// Initializes a new instance of the SymbolUploadBeginResponse class.
        /// </summary>
        public SymbolUploadBeginResponse(string symbolUploadId, string uploadUrl, DateTime expirationDate)
        {
            SymbolUploadId = symbolUploadId;
            UploadUrl = uploadUrl;
            ExpirationDate = expirationDate;
        }

        /// <summary>
        /// The id for the current upload
        /// </summary>
        [JsonProperty(PropertyName = "symbol_upload_id")]
        public string SymbolUploadId { get; set; }

        /// <summary>
        /// The URL where the client needs to upload the symbol blob to
        /// </summary>
        [JsonProperty(PropertyName = "upload_url")]
        public string UploadUrl { get; set; }

        /// <summary>
        /// Describes how long the upload_url is valid
        /// </summary>
        [JsonProperty(PropertyName = "expiration_date")]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (SymbolUploadId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SymbolUploadId");
            }
            if (UploadUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UploadUrl");
            }
        }
    }
}
