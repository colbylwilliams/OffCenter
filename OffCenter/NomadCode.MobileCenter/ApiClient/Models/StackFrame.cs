// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// a single frame of a stack trace
    /// </summary>
    public partial class StackFrame
    {
        /// <summary>
        /// Initializes a new instance of the StackFrame class.
        /// </summary>
        public StackFrame() { }

        /// <summary>
        /// Initializes a new instance of the StackFrame class.
        /// </summary>
        public StackFrame(bool appCode, string codeRaw, string codeFormatted, string address = default(string), string className = default(string), string method = default(string), bool? classMethod = default(bool?), string file = default(string), int? line = default(int?), string frameworkName = default(string), string language = default(string), bool? relevant = default(bool?), string methodParams = default(string))
        {
            Address = address;
            ClassName = className;
            Method = method;
            ClassMethod = classMethod;
            File = file;
            Line = line;
            AppCode = appCode;
            FrameworkName = frameworkName;
            CodeRaw = codeRaw;
            CodeFormatted = codeFormatted;
            Language = language;
            Relevant = relevant;
            MethodParams = methodParams;
        }

        /// <summary>
        /// address of the frame
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public string Address { get; set; }

        /// <summary>
        /// name of the class
        /// </summary>
        [JsonProperty(PropertyName = "class_name")]
        public string ClassName { get; set; }

        /// <summary>
        /// name of the method
        /// </summary>
        [JsonProperty(PropertyName = "method")]
        public string Method { get; set; }

        /// <summary>
        /// is a class method
        /// </summary>
        [JsonProperty(PropertyName = "class_method")]
        public bool? ClassMethod { get; set; }

        /// <summary>
        /// name of the file
        /// </summary>
        [JsonProperty(PropertyName = "file")]
        public string File { get; set; }

        /// <summary>
        /// line number
        /// </summary>
        [JsonProperty(PropertyName = "line")]
        public int? Line { get; set; }

        /// <summary>
        /// this line isn't from any framework
        /// </summary>
        [JsonProperty(PropertyName = "app_code")]
        public bool AppCode { get; set; }

        /// <summary>
        /// Name of the framework
        /// </summary>
        [JsonProperty(PropertyName = "framework_name")]
        public string FrameworkName { get; set; }

        /// <summary>
        /// Raw frame string
        /// </summary>
        [JsonProperty(PropertyName = "code_raw")]
        public string CodeRaw { get; set; }

        /// <summary>
        /// Formatted frame string
        /// </summary>
        [JsonProperty(PropertyName = "code_formatted")]
        public string CodeFormatted { get; set; }

        /// <summary>
        /// programming language of the frame. Possible values include:
        /// 'JavaScript', 'CSharp', 'Objective-C', 'Objective-Cpp', 'Cpp',
        /// 'C', 'Swift', 'Java', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// frame should be shown always
        /// </summary>
        [JsonProperty(PropertyName = "relevant")]
        public bool? Relevant { get; set; }

        /// <summary>
        /// parameters of the frames method
        /// </summary>
        [JsonProperty(PropertyName = "method_params")]
        public string MethodParams { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (CodeRaw == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CodeRaw");
            }
            if (CodeFormatted == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CodeFormatted");
            }
        }
    }
}
