// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Response message for single uploaded file hash
    /// </summary>
    public partial class TestCloudFileHashResponse
    {
        /// <summary>
        /// Initializes a new instance of the TestCloudFileHashResponse class.
        /// </summary>
        public TestCloudFileHashResponse() { }

        /// <summary>
        /// Initializes a new instance of the TestCloudFileHashResponse class.
        /// </summary>
        public TestCloudFileHashResponse(string fileType, string checksum, TestCloudHashUploadStatus uploadStatus, string relativePath = default(string))
        {
            FileType = fileType;
            Checksum = checksum;
            RelativePath = relativePath;
            UploadStatus = uploadStatus;
        }

        /// <summary>
        /// Type of the file. Possible values include: 'dsym-file',
        /// 'app-file', 'test-file'
        /// </summary>
        [JsonProperty(PropertyName = "fileType")]
        public string FileType { get; set; }

        /// <summary>
        /// SHA256 hash of the file
        /// </summary>
        [JsonProperty(PropertyName = "checksum")]
        public string Checksum { get; set; }

        /// <summary>
        /// Relative path of the file
        /// </summary>
        [JsonProperty(PropertyName = "relativePath")]
        public string RelativePath { get; set; }

        /// <summary>
        /// Status of the upload
        /// </summary>
        [JsonProperty(PropertyName = "uploadStatus")]
        public TestCloudHashUploadStatus UploadStatus { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (FileType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FileType");
            }
            if (Checksum == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Checksum");
            }
            if (UploadStatus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UploadStatus");
            }
            if (this.UploadStatus != null)
            {
                this.UploadStatus.Validate();
            }
        }
    }
}
