// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// a thread representation
    /// </summary>
    public partial class Thread
    {
        /// <summary>
        /// Initializes a new instance of the Thread class.
        /// </summary>
        public Thread() { }

        /// <summary>
        /// Initializes a new instance of the Thread class.
        /// </summary>
        public Thread(string title, IList<StackFrame> frames, Exception exception = default(Exception), bool? relevant = default(bool?))
        {
            Title = title;
            Frames = frames;
            Exception = exception;
            Relevant = relevant;
        }

        /// <summary>
        /// name of the thread
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// frames of that thread
        /// </summary>
        [JsonProperty(PropertyName = "frames")]
        public IList<StackFrame> Frames { get; set; }

        /// <summary>
        /// potential additional exception happened in that thread (Last
        /// Exception Backtrace)
        /// </summary>
        [JsonProperty(PropertyName = "exception")]
        public Exception Exception { get; set; }

        /// <summary>
        /// Shows if a thread is relevant or not. Is false if all frames are
        /// non relevant, otherwise true
        /// </summary>
        [JsonProperty(PropertyName = "relevant")]
        public bool? Relevant { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (Frames == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Frames");
            }
            if (this.Frames != null)
            {
                foreach (var element in this.Frames)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Exception != null)
            {
                this.Exception.Validate();
            }
        }
    }
}
