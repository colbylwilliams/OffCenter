// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Test.
    /// </summary>
    public static partial class TestExtensions
    {
            /// <summary>
            /// Returns list of all test runs for a given test series
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            public static IList<TestRun> GetAllTestRunsForSeries(this ITest operations, string testSeriesSlug)
            {
                return Task.Factory.StartNew(s => ((ITest)s).GetAllTestRunsForSeriesAsync(testSeriesSlug), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of all test runs for a given test series
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TestRun>> GetAllTestRunsForSeriesAsync(this ITest operations, string testSeriesSlug, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTestRunsForSeriesWithHttpMessagesAsync(testSeriesSlug, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a single test series
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            public static void DeleteTestSeries(this ITest operations, string testSeriesSlug)
            {
                Task.Factory.StartNew(s => ((ITest)s).DeleteTestSeriesAsync(testSeriesSlug), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a single test series
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTestSeriesAsync(this ITest operations, string testSeriesSlug, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteTestSeriesWithHttpMessagesAsync(testSeriesSlug, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates name and slug of a test series
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            /// <param name='name'>
            /// New name of the new test series
            /// </param>
            public static TestSeries PatchTestSeries(this ITest operations, string testSeriesSlug, string name)
            {
                return Task.Factory.StartNew(s => ((ITest)s).PatchTestSeriesAsync(testSeriesSlug, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates name and slug of a test series
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            /// <param name='name'>
            /// New name of the new test series
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestSeries> PatchTestSeriesAsync(this ITest operations, string testSeriesSlug, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchTestSeriesWithHttpMessagesAsync(testSeriesSlug, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of all test series for an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TestSeries> GetAllTestSeries(this ITest operations)
            {
                return Task.Factory.StartNew(s => ((ITest)s).GetAllTestSeriesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of all test series for an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TestSeries>> GetAllTestSeriesAsync(this ITest operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTestSeriesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates new test series for an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the new test series
            /// </param>
            public static object CreateTestSeries(this ITest operations, string name)
            {
                return Task.Factory.StartNew(s => ((ITest)s).CreateTestSeriesAsync(name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates new test series for an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the new test series
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateTestSeriesAsync(this ITest operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTestSeriesWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets state of the test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            public static TestRunState GetTestRunState(this ITest operations, string testRunId)
            {
                return Task.Factory.StartNew(s => ((ITest)s).GetTestRunStateAsync(testRunId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets state of the test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestRunState> GetTestRunStateAsync(this ITest operations, string testRunId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTestRunStateWithHttpMessagesAsync(testRunId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='startOptions'>
            /// Option required to start the test run
            /// </param>
            public static TestCloudStartTestRunResult StartTestRun(this ITest operations, string testRunId, TestCloudStartTestRunOptions startOptions)
            {
                return Task.Factory.StartNew(s => ((ITest)s).StartTestRunAsync(testRunId, startOptions), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='startOptions'>
            /// Option required to start the test run
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestCloudStartTestRunResult> StartTestRunAsync(this ITest operations, string testRunId, TestCloudStartTestRunOptions startOptions, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartTestRunWithHttpMessagesAsync(testRunId, startOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a single test report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            public static TestReport GetTestReport(this ITest operations, Guid testRunId)
            {
                return Task.Factory.StartNew(s => ((ITest)s).GetTestReportAsync(testRunId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a single test report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestReport> GetTestReportAsync(this ITest operations, Guid testRunId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTestReportWithHttpMessagesAsync(testRunId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds file with the given hash to a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='fileInfo'>
            /// File hash information
            /// </param>
            public static IList<TestCloudFileHashResponse> UploadHashesBatch(this ITest operations, string testRunId, IList<TestCloudFileHash> fileInfo)
            {
                return Task.Factory.StartNew(s => ((ITest)s).UploadHashesBatchAsync(testRunId, fileInfo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds file with the given hash to a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='fileInfo'>
            /// File hash information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TestCloudFileHashResponse>> UploadHashesBatchAsync(this ITest operations, string testRunId, IList<TestCloudFileHash> fileInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadHashesBatchWithHttpMessagesAsync(testRunId, fileInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds file with the given hash to a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='fileInfo'>
            /// File hash information
            /// </param>
            public static TestUploadHashHeaders UploadHash(this ITest operations, string testRunId, TestCloudFileHashDeprecated fileInfo)
            {
                return Task.Factory.StartNew(s => ((ITest)s).UploadHashAsync(testRunId, fileInfo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds file with the given hash to a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='fileInfo'>
            /// File hash information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestUploadHashHeaders> UploadHashAsync(this ITest operations, string testRunId, TestCloudFileHashDeprecated fileInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadHashWithHttpMessagesAsync(testRunId, fileInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Uploads file for a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            public static TestStartUploadingFileHeaders StartUploadingFile(this ITest operations, string testRunId)
            {
                return Task.Factory.StartNew(s => ((ITest)s).StartUploadingFileAsync(testRunId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads file for a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestStartUploadingFileHeaders> StartUploadingFileAsync(this ITest operations, string testRunId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartUploadingFileWithHttpMessagesAsync(testRunId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Returns a single test runs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            public static TestRun GetTestRun(this ITest operations, Guid testRunId)
            {
                return Task.Factory.StartNew(s => ((ITest)s).GetTestRunAsync(testRunId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a single test runs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestRun> GetTestRunAsync(this ITest operations, Guid testRunId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTestRunWithHttpMessagesAsync(testRunId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of test runs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TestRun> GetTestRuns(this ITest operations)
            {
                return Task.Factory.StartNew(s => ((ITest)s).GetTestRunsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of test runs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TestRun>> GetTestRunsAsync(this ITest operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTestRunsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static TestCreateTestRunHeaders CreateTestRun(this ITest operations)
            {
                return Task.Factory.StartNew(s => ((ITest)s).CreateTestRunAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestCreateTestRunHeaders> CreateTestRunAsync(this ITest operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTestRunWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get information about the currently active subscriptions, if any
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Subscription GetSubscriptions(this ITest operations)
            {
                return Task.Factory.StartNew(s => ((ITest)s).GetSubscriptionsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get information about the currently active subscriptions, if any
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Subscription> GetSubscriptionsAsync(this ITest operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Accept a free trial subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Subscription CreateSubscription(this ITest operations)
            {
                return Task.Factory.StartNew(s => ((ITest)s).CreateSubscriptionAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Accept a free trial subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Subscription> CreateSubscriptionAsync(this ITest operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a short ID for a list of devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='devices'>
            /// List of device IDs
            /// </param>
            public static object CreateDeviceSelection(this ITest operations, IList<string> devices)
            {
                return Task.Factory.StartNew(s => ((ITest)s).CreateDeviceSelectionAsync(devices), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a short ID for a list of devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='devices'>
            /// List of device IDs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateDeviceSelectionAsync(this ITest operations, IList<string> devices, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDeviceSelectionWithHttpMessagesAsync(devices, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of available devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appUploadId'>
            /// The ID of the test run
            /// </param>
            public static IList<DeviceConfiguration> GetDeviceConfigurations(this ITest operations, Guid? appUploadId = default(Guid?))
            {
                return Task.Factory.StartNew(s => ((ITest)s).GetDeviceConfigurationsAsync(appUploadId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of available devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appUploadId'>
            /// The ID of the test run
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DeviceConfiguration>> GetDeviceConfigurationsAsync(this ITest operations, Guid? appUploadId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeviceConfigurationsWithHttpMessagesAsync(appUploadId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
