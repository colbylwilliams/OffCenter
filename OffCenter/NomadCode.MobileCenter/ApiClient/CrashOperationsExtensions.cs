// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for CrashOperations.
    /// </summary>
    public static partial class CrashOperationsExtensions
    {
            /// <summary>
            /// Gets a list of application versions
            /// </summary>
            /// Gets a list of application versions
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<AppVersion> GetAppVersions(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).GetAppVersionsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of application versions
            /// </summary>
            /// Gets a list of application versions
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AppVersion>> GetAppVersionsAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppVersionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Marks a symbol by id (uuid) as ignored
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object PostIgnoreSymbol(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).PostIgnoreSymbolAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Marks a symbol by id (uuid) as ignored
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostIgnoreSymbolAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostIgnoreSymbolWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a particular symbol by id (uuid) for the provided application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSymbol(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).GetSymbolAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a particular symbol by id (uuid) for the provided application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSymbolAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSymbolWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the list of all symbols for the provided application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSymbols(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).GetSymbolsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of all symbols for the provided application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSymbolsAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSymbolsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a symbol upload by id for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSymbolUpload(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).GetSymbolUploadAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a symbol upload by id for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSymbolUploadAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSymbolUploadWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Commits or aborts the symbol upload process for a new set of symbols for
            /// the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The symbol information
            /// </param>
            public static object PatchSymbolUpload(this ICrashOperations operations, SymbolUploadEndRequest body)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).PatchSymbolUploadAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Commits or aborts the symbol upload process for a new set of symbols for
            /// the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The symbol information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PatchSymbolUploadAsync(this ICrashOperations operations, SymbolUploadEndRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchSymbolUploadWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a symbol upload by id for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object DeleteSymbolUpload(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).DeleteSymbolUploadAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a symbol upload by id for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSymbolUploadAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSymbolUploadWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of all uploads for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSymbolUploads(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).GetSymbolUploadsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all uploads for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSymbolUploadsAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSymbolUploadsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Begins the symbol upload process for a new set of symbols for the
            /// specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The symbol information
            /// </param>
            public static object PostSymbolUpload(this ICrashOperations operations, SymbolUploadBeginRequest body)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).PostSymbolUploadAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Begins the symbol upload process for a new set of symbols for the
            /// specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The symbol information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostSymbolUploadAsync(this ICrashOperations operations, SymbolUploadBeginRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSymbolUploadWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a stacktrace for a specific error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Stacktrace GetGroupStacktrace(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).GetGroupStacktraceAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a stacktrace for a specific error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stacktrace> GetGroupStacktraceAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupStacktraceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a stacktrace for a specific error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Stacktrace GetErrorStacktrace(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).GetErrorStacktraceAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a stacktrace for a specific error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stacktrace> GetErrorStacktraceAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetErrorStacktraceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific error for an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Crash GetCrash(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).GetCrashAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific error for an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Crash> GetCrashAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCrashWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all crashes of the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Crash> GetCrashes(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).GetCrashesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all crashes of the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Crash>> GetCrashesAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCrashesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CrashGroup GetCrashGroup(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).GetCrashGroupAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashGroup> GetCrashGroupAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCrashGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Group change object. All fields are optional and only provided fields will
            /// get updated.
            /// </param>
            public static CrashGroup PatchCrashGroup(this ICrashOperations operations, CrashGroupChange group)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).PatchCrashGroupAsync(group), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Group change object. All fields are optional and only provided fields will
            /// get updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashGroup> PatchCrashGroupAsync(this ICrashOperations operations, CrashGroupChange group, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCrashGroupWithHttpMessagesAsync(group, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of crashes
            /// </summary>
            /// Gets a list of crashes
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CrashGroup> GetCrashGroups(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).GetCrashGroupsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of crashes
            /// </summary>
            /// Gets a list of crashes
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CrashGroup>> GetCrashGroupsAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCrashGroupsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CrashGroupCounts GetCrashGroupCounts(this ICrashOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICrashOperations)s).GetCrashGroupCountsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashGroupCounts> GetCrashGroupCountsAsync(this ICrashOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCrashGroupCountsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
