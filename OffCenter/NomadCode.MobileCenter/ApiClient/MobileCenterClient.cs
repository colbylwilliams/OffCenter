// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace NomadCode.MobileCenter
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Diagnostics;
	using System.Net;
	using System.Net.Http;
	using System.Net.Http.Headers;
	using System.Text;
	using System.Text.RegularExpressions;
	using System.Threading;
	using System.Threading.Tasks;
	using Microsoft.Rest;
	using Microsoft.Rest.Serialization;
	using Newtonsoft.Json;
	using Models;

	/// <summary>
	/// Mobile Center Frontdoor Graph API Service
	/// </summary>
	public partial class MobileCenterClient : ServiceClient<MobileCenterClient>, IMobileCenterClient
	{
		/// <summary>
		/// The base URI of the service.
		/// </summary>
		public Uri BaseUri { get; set; }

		/// <summary>
		/// Gets or sets json serialization settings.
		/// </summary>
		public JsonSerializerSettings SerializationSettings { get; private set; }

		/// <summary>
		/// Gets or sets json deserialization settings.
		/// </summary>
		public JsonSerializerSettings DeserializationSettings { get; private set; }

		/// <summary>
		/// The name of the application
		/// </summary>
		public string AppName { get; set; }

		/// <summary>
		/// The name of the owner
		/// </summary>
		public string OwnerName { get; set; }

		/// <summary>
		/// The app ID
		/// </summary>
		public string AppId { get; set; }

		/// <summary>
		/// The build ID
		/// </summary>
		public int BuildId { get; set; }

		/// <summary>
		/// The branch name
		/// </summary>
		public string Branch { get; set; }

		/// <summary>
		/// The SHA hash
		/// </summary>
		public string Sha { get; set; }

		/// <summary>
		/// The selected form of the object. Possible values include: 'lite', 'full'
		/// </summary>
		public string Form { get; set; }

		/// <summary>
		/// An auth token
		/// </summary>
		public string Token { get; set; }

		/// <summary>
		/// The ID of the symbol upload
		/// </summary>
		public string SymbolUploadId { get; set; }

		/// <summary>
		/// The ID of the symbol (uuid of the symbol)
		/// </summary>
		public string SymbolId { get; set; }

		///// <summary>
		///// id of a specific group
		///// </summary>
		//public string CrashGroupId { get; set; }

		/// <summary>
		/// id of a specific error
		/// </summary>
		public string CrashId { get; set; }

		/// <summary>
		/// version
		/// </summary>
		public string AppVersion { get; set; }

		/// <summary>
		/// </summary>
		public DateTime? DateFrom { get; set; }

		/// <summary>
		/// </summary>
		public DateTime? DateTo { get; set; }

		/// <summary>
		/// Earliest date when the last time a crash occured in a error group
		/// </summary>
		public DateTime? LastOccurrenceFrom { get; set; }

		/// <summary>
		/// Latest date when the last time a crash occured in a error group
		/// </summary>
		public DateTime? LastOccurrenceTo { get; set; }

		/// <summary>
		/// Possible values include: 'something', 'else'
		/// </summary>
		public string ErrorType { get; set; }

		/// <summary>
		/// Possible values include: 'GroupType1', 'GroupType2'
		/// </summary>
		public string GroupType { get; set; }

		/// <summary>
		/// Possible values include: 'open', 'closed', 'ignored'
		/// </summary>
		public string GroupStatus { get; set; }

		/// <summary>
		/// true if the error should include the raw error report. Default is false
		/// </summary>
		public bool? IncludeReport { get; set; }

		/// <summary>
		/// true if the error should include the custom log report. Default is false
		/// </summary>
		public bool? IncludeLog { get; set; }

		/// <summary>
		/// A freetext search that matches in error, error types, error stack_traces
		/// and error user
		/// </summary>
		public string GroupTextSearch { get; set; }

		///// <summary>
		///// Start date time in data in ISO 8601 date time format
		///// </summary>
		//public DateTime Start { get; set; }

		/// <summary>
		/// Start date time in data in ISO 8601 date time format. It must be within
		/// the current day in the UTC timezone. The default value is the start time
		/// of the current day in UTC timezone.
		/// </summary>
		public DateTime? Start { get; set; }

		/// <summary>
		/// Last date time in data in ISO 8601 date time format
		/// </summary>
		public DateTime? End { get; set; }

		/// <summary>
		/// The id of the crash group
		/// </summary>
		public string CrashGroupId { get; set; }

		/// <summary>
		/// </summary>
		public CrashGroupContainer CrashGroups { get; set; }

		/// <summary>
		/// The id of the event
		/// </summary>
		public string EventName { get; set; }

		/// <summary>
		/// The id of the event property
		/// </summary>
		public string EventPropertyName { get; set; }

		/// <summary>
		/// Size of interval in ISO 8601 duration format.
		/// (PnYnMnDTnHnMnS|PnW|P&lt;date&gt;T&lt;time&gt;). The valid durations are
		/// 1 day (P1D), 1 week (P1W), and 30 days (P30D).
		/// </summary>
		public string Interval { get; set; }

		/// <summary>
		/// </summary>
		public IList<string> Versions { get; set; }

		/// <summary>
		/// </summary>
		public string Version { get; set; }

		/// <summary>
		/// to select the specific events
		/// </summary>
		public IList<string> EventNames { get; set; }

		/// <summary>
		/// The number of results to return
		/// </summary>
		public long? Count { get; set; }

		/// <summary>
		/// The maximum number of results to return. (0 will fetch all results)
		/// </summary>
		public long? Top { get; set; }

		/// <summary>
		/// The offset (starting at 0) of the first result to return. This parameter
		/// along with limit is used to perform pagination.
		/// </summary>
		public long? Skip { get; set; }

		/// <summary>
		/// A filter as specified in
		/// https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering.
		/// </summary>
		public string Filter { get; set; }

		/// <summary>
		/// Controls whether or not to include a count of all the items accross all
		/// pages. Possible values include: 'allpages', 'none'
		/// </summary>
		public string Inlinecount { get; set; }

		/// <summary>
		/// controls the sorting order and sorting based on which column
		/// </summary>
		public string Orderby { get; set; }

		/// <summary>
		/// Subscription credentials which uniquely identify client subscription.
		/// </summary>
		public ServiceClientCredentials Credentials { get; private set; }

		/// <summary>
		/// Gets the IAccount.
		/// </summary>
		public virtual IAccount Account { get; private set; }

		/// <summary>
		/// Gets the IBuildOperations.
		/// </summary>
		public virtual IBuildOperations BuildOperations { get; private set; }

		/// <summary>
		/// Gets the ICrashOperations.
		/// </summary>
		public virtual ICrashOperations CrashOperations { get; private set; }

		/// <summary>
		/// Gets the ITest.
		/// </summary>
		public virtual ITest Test { get; private set; }

		/// <summary>
		/// Gets the IData.
		/// </summary>
		public virtual IData Data { get; private set; }

		/// <summary>
		/// Gets the IDistribute.
		/// </summary>
		public virtual IDistribute Distribute { get; private set; }

		/// <summary>
		/// Gets the IAnalytics.
		/// </summary>
		public virtual IAnalytics Analytics { get; private set; }

		/// <summary>
		/// Initializes a new instance of the MobileCenterClient class.
		/// </summary>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		protected MobileCenterClient (params DelegatingHandler [] handlers) : base (handlers)
		{
			this.Initialize ();
		}

		/// <summary>
		/// Initializes a new instance of the MobileCenterClient class.
		/// </summary>
		/// <param name='rootHandler'>
		/// Optional. The http client handler used to handle http transport.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		protected MobileCenterClient (HttpClientHandler rootHandler, params DelegatingHandler [] handlers) : base (rootHandler, handlers)
		{
			this.Initialize ();
		}

		/// <summary>
		/// Initializes a new instance of the MobileCenterClient class.
		/// </summary>
		/// <param name='baseUri'>
		/// Optional. The base URI of the service.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		protected MobileCenterClient (Uri baseUri, params DelegatingHandler [] handlers) : this (handlers)
		{
			if (baseUri == null)
			{
				throw new ArgumentNullException ("baseUri");
			}
			this.BaseUri = baseUri;
		}

		/// <summary>
		/// Initializes a new instance of the MobileCenterClient class.
		/// </summary>
		/// <param name='baseUri'>
		/// Optional. The base URI of the service.
		/// </param>
		/// <param name='rootHandler'>
		/// Optional. The http client handler used to handle http transport.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		protected MobileCenterClient (Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler [] handlers) : this (rootHandler, handlers)
		{
			if (baseUri == null)
			{
				throw new ArgumentNullException ("baseUri");
			}
			this.BaseUri = baseUri;
		}

		/// <summary>
		/// Initializes a new instance of the MobileCenterClient class.
		/// </summary>
		/// <param name='credentials'>
		/// Required. Subscription credentials which uniquely identify client subscription.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		public MobileCenterClient (ServiceClientCredentials credentials, params DelegatingHandler [] handlers) : this (handlers)
		{
			if (credentials == null)
			{
				throw new ArgumentNullException ("credentials");
			}
			this.Credentials = credentials;
			if (this.Credentials != null)
			{
				this.Credentials.InitializeServiceClient (this);
			}
		}

		/// <summary>
		/// Initializes a new instance of the MobileCenterClient class.
		/// </summary>
		/// <param name='credentials'>
		/// Required. Subscription credentials which uniquely identify client subscription.
		/// </param>
		/// <param name='rootHandler'>
		/// Optional. The http client handler used to handle http transport.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		public MobileCenterClient (ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler [] handlers) : this (rootHandler, handlers)
		{
			if (credentials == null)
			{
				throw new ArgumentNullException ("credentials");
			}
			this.Credentials = credentials;
			if (this.Credentials != null)
			{
				this.Credentials.InitializeServiceClient (this);
			}
		}

		/// <summary>
		/// Initializes a new instance of the MobileCenterClient class.
		/// </summary>
		/// <param name='baseUri'>
		/// Optional. The base URI of the service.
		/// </param>
		/// <param name='credentials'>
		/// Required. Subscription credentials which uniquely identify client subscription.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		public MobileCenterClient (Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler [] handlers) : this (handlers)
		{
			if (baseUri == null)
			{
				throw new ArgumentNullException ("baseUri");
			}
			if (credentials == null)
			{
				throw new ArgumentNullException ("credentials");
			}
			this.BaseUri = baseUri;
			this.Credentials = credentials;
			if (this.Credentials != null)
			{
				this.Credentials.InitializeServiceClient (this);
			}
		}

		/// <summary>
		/// Initializes a new instance of the MobileCenterClient class.
		/// </summary>
		/// <param name='baseUri'>
		/// Optional. The base URI of the service.
		/// </param>
		/// <param name='credentials'>
		/// Required. Subscription credentials which uniquely identify client subscription.
		/// </param>
		/// <param name='rootHandler'>
		/// Optional. The http client handler used to handle http transport.
		/// </param>
		/// <param name='handlers'>
		/// Optional. The delegating handlers to add to the http client pipeline.
		/// </param>
		public MobileCenterClient (Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler [] handlers) : this (rootHandler, handlers)
		{
			if (baseUri == null)
			{
				throw new ArgumentNullException ("baseUri");
			}
			if (credentials == null)
			{
				throw new ArgumentNullException ("credentials");
			}
			this.BaseUri = baseUri;
			this.Credentials = credentials;
			if (this.Credentials != null)
			{
				this.Credentials.InitializeServiceClient (this);
			}
		}

		/// <summary>
		/// An optional partial-method to perform custom initialization.
		///</summary> 
		partial void CustomInitialize ();
		/// <summary>
		/// Initializes client properties.
		/// </summary>
		private void Initialize ()
		{
			this.Account = new Account (this);
			this.BuildOperations = new BuildOperations (this);
			this.CrashOperations = new CrashOperations (this);
			this.Test = new Test (this);
			this.Data = new Data (this);
			this.Distribute = new Distribute (this);
			this.Analytics = new Analytics (this);
			this.BaseUri = new Uri ("https://api.mobile.azure.com/");
			this.IncludeReport = false;
			this.IncludeLog = false;
			this.Top = 30;
			this.Skip = 0;
			this.Inlinecount = "none";
			this.Orderby = "count desc";
			SerializationSettings = new JsonSerializerSettings
			{
				Formatting = Formatting.Indented,
				DateFormatHandling = DateFormatHandling.IsoDateFormat,
				DateTimeZoneHandling = DateTimeZoneHandling.Utc,
				NullValueHandling = NullValueHandling.Ignore,
				ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
				ContractResolver = new ReadOnlyJsonContractResolver (),
				Converters = new List<JsonConverter>
					{
						new Iso8601TimeSpanConverter()
					}
			};
			DeserializationSettings = new JsonSerializerSettings
			{
				DateFormatHandling = DateFormatHandling.IsoDateFormat,
				DateTimeZoneHandling = DateTimeZoneHandling.Utc,
				NullValueHandling = NullValueHandling.Ignore,
				ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
				ContractResolver = new ReadOnlyJsonContractResolver (),
				Converters = new List<JsonConverter>
					{
						new Iso8601TimeSpanConverter()
					}
			};
			SerializationSettings.Converters.Add (new PolymorphicSerializeJsonConverter<Log> ("type"));
			DeserializationSettings.Converters.Add (new PolymorphicDeserializeJsonConverter<Log> ("type"));
			CustomInitialize ();
		}
	}
}
